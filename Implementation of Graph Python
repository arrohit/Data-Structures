class Vertex(object):
    def __init__(self,key):
        self.id=key
        self.connectedto={}
    def addNeighbours(self,nbr,weight=0):
        self.connectedto[nbr]=weight
    def getConnections(self):
        return self.connectedto.keys()
    def getVertex(self):
        return self.id
    def getWeight(self,nbr):
        return self.connectedto[nbr]
    def __str__(self):
        return str(self.id)+ 'connected to: '+ str([x.id for x in self.connectedto])
        
class Graph(object):
    def __init__(self):
        self.vertList={}
        self.numVertices=0
    def addVertex(self,key):
        self.numVertices=self.numVertices+1
        newVertex=Vertex(key)
        self.vertList[key]=newVertex
        return newVertex
    def getVertex(self,n):
        if n in self.VertList:
            return self.VertList[n]
        else:
            return None
    def addEdge(self,f,t,cost=0):
        if f not in self.vertList:
            nv=self.addVertex(f)
        if t not in self.vertList:
            nv=self.addVertex(t)
        self.vertList[f].addNeighbour(self.vertList[t],cost=0)
            
    def getVertices(self):
        return self.vertList.keys()
    
